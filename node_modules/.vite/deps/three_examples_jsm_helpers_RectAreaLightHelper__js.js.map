{
  "version": 3,
  "sources": ["../../three/examples/jsm/helpers/RectAreaLightHelper.js"],
  "sourcesContent": ["import {\r\n\tBackSide,\r\n\tBufferGeometry,\r\n\tFloat32BufferAttribute,\r\n\tLine,\r\n\tLineBasicMaterial,\r\n\tMesh,\r\n\tMeshBasicMaterial\r\n} from 'three';\r\n\r\n/**\r\n *  This helper must be added as a child of the light\r\n */\r\n\r\nclass RectAreaLightHelper extends Line {\r\n\r\n\tconstructor( light, color ) {\r\n\r\n\t\tconst positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tconst material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.color = color; // optional hardwired color for the helper\r\n\t\tthis.type = 'RectAreaLightHelper';\r\n\r\n\t\t//\r\n\r\n\t\tconst positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\r\n\r\n\t\tconst geometry2 = new BufferGeometry();\r\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\r\n\t\tgeometry2.computeBoundingSphere();\r\n\r\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld() {\r\n\r\n\t\tthis.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\t\t\tthis.children[ 0 ].material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t\t\t// prevent hue shift\r\n\t\t\tconst c = this.material.color;\r\n\t\t\tconst max = Math.max( c.r, c.g, c.b );\r\n\t\t\tif ( max > 1 ) c.multiplyScalar( 1 / max );\r\n\r\n\t\t\tthis.children[ 0 ].material.color.copy( this.material.color );\r\n\r\n\t\t}\r\n\r\n\t\t// ignore world scale on light\r\n\t\tthis.matrixWorld.extractRotation( this.light.matrixWorld ).scale( this.scale ).copyPosition( this.light.matrixWorld );\r\n\r\n\t\tthis.children[ 0 ].matrixWorld.copy( this.matrixWorld );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RectAreaLightHelper };\r\n"],
  "mappings": ";;;;;;;;;;;;AAcA,IAAM,sBAAN,cAAkC,KAAK;AAAA,EAEtC,YAAa,OAAO,OAAQ;AAE3B,UAAM,YAAY,CAAE,GAAG,GAAG,GAAG,IAAK,GAAG,GAAG,IAAK,IAAK,GAAG,GAAG,IAAK,GAAG,GAAG,GAAG,CAAE;AAExE,UAAM,WAAW,IAAI,eAAe;AACpC,aAAS,aAAc,YAAY,IAAI,uBAAwB,WAAW,CAAE,CAAE;AAC9E,aAAS,sBAAsB;AAE/B,UAAM,WAAW,IAAI,kBAAmB,EAAE,KAAK,MAAM,CAAE;AAEvD,UAAO,UAAU,QAAS;AAE1B,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,OAAO;AAIZ,UAAM,aAAa,CAAE,GAAG,GAAG,GAAG,IAAK,GAAG,GAAG,IAAK,IAAK,GAAG,GAAG,GAAG,GAAG,IAAK,IAAK,GAAG,GAAG,IAAK,CAAE;AAEtF,UAAM,YAAY,IAAI,eAAe;AACrC,cAAU,aAAc,YAAY,IAAI,uBAAwB,YAAY,CAAE,CAAE;AAChF,cAAU,sBAAsB;AAEhC,SAAK,IAAK,IAAI,KAAM,WAAW,IAAI,kBAAmB,EAAE,MAAM,UAAU,KAAK,MAAM,CAAE,CAAE,CAAE;AAAA,EAE1F;AAAA,EAEA,oBAAoB;AAEnB,SAAK,MAAM,IAAK,MAAM,KAAK,MAAM,OAAO,MAAM,KAAK,MAAM,QAAQ,CAAE;AAEnE,QAAK,KAAK,UAAU,QAAY;AAE/B,WAAK,SAAS,MAAM,IAAK,KAAK,KAAM;AACpC,WAAK,SAAU,CAAE,EAAE,SAAS,MAAM,IAAK,KAAK,KAAM;AAAA,IAEnD,OAAO;AAEN,WAAK,SAAS,MAAM,KAAM,KAAK,MAAM,KAAM,EAAE,eAAgB,KAAK,MAAM,SAAU;AAGlF,YAAM,IAAI,KAAK,SAAS;AACxB,YAAM,MAAM,KAAK,IAAK,EAAE,GAAG,EAAE,GAAG,EAAE,CAAE;AACpC,UAAK,MAAM,EAAI,GAAE,eAAgB,IAAI,GAAI;AAEzC,WAAK,SAAU,CAAE,EAAE,SAAS,MAAM,KAAM,KAAK,SAAS,KAAM;AAAA,IAE7D;AAGA,SAAK,YAAY,gBAAiB,KAAK,MAAM,WAAY,EAAE,MAAO,KAAK,KAAM,EAAE,aAAc,KAAK,MAAM,WAAY;AAEpH,SAAK,SAAU,CAAE,EAAE,YAAY,KAAM,KAAK,WAAY;AAAA,EAEvD;AAAA,EAEA,UAAU;AAET,SAAK,SAAS,QAAQ;AACtB,SAAK,SAAS,QAAQ;AACtB,SAAK,SAAU,CAAE,EAAE,SAAS,QAAQ;AACpC,SAAK,SAAU,CAAE,EAAE,SAAS,QAAQ;AAAA,EAErC;AAED;",
  "names": []
}
